#!/bin/bash
echo "========================================"
echo "1.server default setting================"
hostname "${hostname}"
yum update -y
echo "========================================"
echo "2.env setting==========================="
mkdir -p "/root/eks_bin" && export "PATH=$PATH:/root/eks_bin" && echo "export PATH=$PATH:/root/eks_bin" >> "/root/.bash_profile"
mkdir -p "/root/.aws"
echo "[default]" > "/root/.aws/config"
echo "region = ${eks_iam_region}" >> "/root/.aws/config"
echo "[default]" > "/root/.aws/credentials"
echo "aws_access_key_id = ${eks_iam_access_key}" >> /root/.aws/credentials
echo "aws_secret_access_key = ${eks_iam_secret_key}" >> /root/.aws/credentials
export "AWS_DEFAULT_REGION=${eks_iam_region}"
export "AWS_ACCESS_KEY_ID=${eks_iam_access_key}"
export "AWS_SECRET_ACCESS_KEY=${eks_iam_secret_key}"
chmod 640 /root/.aws/*
echo "========================================"
echo "3.install helm=========================="
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh && ./get_helm.sh && mv ./get_helm.sh "/root/eks_bin"
helm repo add stable https://charts.helm.sh/stable && helm repo update
echo "========================================"
echo "4.install kubectl======================="
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod 700 kubectl && mv ./kubectl "/root/eks_bin"
echo "========================================"
echo "5.install aws-iam-authenticator========="
curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
chmod +x ./aws-iam-authenticator && mv ./aws-iam-authenticator "/root/eks_bin/aws-iam-authenticator"
echo "========================================"
echo "6.kubectl configure====================="
mkdir -p "/root/.kube"
echo "${kubeconfig}" > "/root/.kube/config"
export "KUBECONFIG=$KUBECONFIG:/root/.kube/config" && echo "export KUBECONFIG=$KUBECONFIG:/root/.kube/config" >> "/root/.bash_profile"
echo "${config_map_aws_auth}" > "/root/eks_bin/configmap.yml"
kubectl apply -f "/root/eks_bin/configmap.yml"
echo "========================================"
echo "7.ingress-nginx install================="
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/aws/deploy.yaml
kubectl get svc -n ingress-nginx
echo "========================================"
echo "8.docker install and image setting======"
yum install docker -y
systemctl enable docker
systemctl start docker
mkdir -p /root/flask_api_sample
curl -Lo /root/flask_api_sample/app.py https://raw.githubusercontent.com/ErsiaJin/terraform_eks_test/main/source_code/flask_api_sample/app.py
curl -Lo /root/flask_api_sample/Dockerfile https://raw.githubusercontent.com/ErsiaJin/terraform_eks_test/main/source_code/flask_api_sample/Dockerfile
curl -Lo /root/flask_api_sample/requirements.txt https://raw.githubusercontent.com/ErsiaJin/terraform_eks_test/main/source_code/flask_api_sample/requirements.txt
aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin "${ecr_repository_url}"
docker build /root/flask_api_sample -t "${ecr_repository_url}"
docker push "${ecr_repository_url}"
docker rmi -f $(docker images -aq)
echo "========================================"
echo "9.start application service and add ingress rule======"
curl -Lo /root/flask_api_sample/flask-app.yaml https://raw.githubusercontent.com/ErsiaJin/terraform_eks_test/main/source_code/flask_api_sample/flask-app.yaml
sed -i "s=<ecr_repository_url>=${ecr_repository_url}=g" /root/flask_api_sample/flask-app.yaml
kubectl apply -f /root/flask_api_sample/flask-app.yaml
curl -Lo /root/flask_api_sample/micro-ingress.yaml https://raw.githubusercontent.com/ErsiaJin/terraform_eks_test/main/source_code/flask_api_sample/micro-ingress.yaml
NLB_DNS=`kubectl get svc -n ingress-nginx | grep -i "LoadBalancer" | awk '{print $4}'`
sed -i "s=<nlb_dns_name>=$NLB_DNS=g" /root/flask_api_sample/micro-ingress.yaml
kubectl apply -f /root/flask_api_sample/micro-ingress.yaml